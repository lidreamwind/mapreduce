<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.bigdata</groupId>
    <artifactId>hdfs</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <hadoop.version>2.9.2</hadoop.version>
        <log.version>2.8.2</log.version>
    </properties>

    <dependencies>
        <!-- 测试类-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>RELEASE</version>
        </dependency>
        <!-- 日志操作-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log.version}</version>
        </dependency>
        <!-- Hadoop 的HDFS操作 -->
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-common</artifactId>
            <version>${hadoop.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-client</artifactId>
            <version>${hadoop.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-hdfs</artifactId>
            <version>${hadoop.version}</version>
        </dependency>

    </dependencies>
    <!--maven打包插件 -->
    <build>
        <plugins>
            <!-- 跳过测试代码-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <!-- 使用maven-compiler-plugin插件可以指定项目源码的jdk版本，
                编译后的jdk版本，以及编码。-->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <!--     支持自定义的打包结构，也可以定制依赖项等。
            我们日常使用的以maven-assembly-plugin为最多，
            因为大数据项目中往往有很多shell脚本、SQL脚本、.properties及.xml配置项等，
            采用assembly插件可以让输出的结构清晰而标准化。 -->
            <plugin>
                <artifactId>maven-assembly-plugin </artifactId>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <!-- 指定主类 -->
                    <archive>
                        <manifest>
                            <mainClass>com.lagou.mapreduce.wc.MyJob</mainClass>
                        </manifest>
                    </archive>

                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
<!--    <build>-->
<!--        <plugins>-->
<!--            <plugin>-->
<!--                <groupId>org.apache.Maven.plugins</groupId>-->
<!--                <artifactId>Maven-compiler-plugin</artifactId>-->
<!--                <version>3.6.0</version>-->
<!--                <configuration>-->
<!--                    <source>1.8</source>-->
<!--                    <target>1.8</target>-->
<!--                    <encoding>utf-8</encoding>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <groupId>org.apache.Maven.plugins</groupId>-->
<!--                <artifactId>Maven-jar-plugin</artifactId>-->
<!--                <version>3.2.0</version>-->
<!--                <configuration>-->
<!--                    <archive>-->
<!--                        <addMavenDescriptor>false</addMavenDescriptor>-->
<!--                        &lt;!&ndash; 指定main信息 &ndash;&gt;-->
<!--                        <manifest>-->
<!--                            &lt;!&ndash;指定添加项目中使用的外部jar的classpath项&ndash;&gt;-->
<!--                            <addClasspath>true</addClasspath>-->
<!--                            <classpathPrefix>lib/</classpathPrefix>-->
<!--                            &lt;!&ndash; 此处指定main方法入口的class &ndash;&gt;-->
<!--                            <mainClass>com.cat.bank.main.Luncher</mainClass>-->
<!--                        </manifest>-->
<!--                    </archive>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <groupId>org.apache.Maven.plugins</groupId>-->
<!--                <artifactId>Maven-assembly-plugin</artifactId>-->
<!--                <version>3.2.0</version>-->
<!--                <configuration>-->
<!--                    <appendAssemblyId>false</appendAssemblyId>-->
<!--                    <descriptors>-->
<!--                        &lt;!&ndash;指定详细的外部配置，读取这个文件，防止pom.xml过于臃肿&ndash;&gt;-->
<!--                        <descriptor>packconf/package.xml</descriptor>-->
<!--                    </descriptors>-->

<!--                </configuration>-->
<!--                &lt;!&ndash;下面是为了使用 mvn package命令，如果不加则使用mvn assembly &ndash;&gt;-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>make-assembly</id>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>assembly</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
<!--        </plugins>-->
<!--    </build>-->

</project>